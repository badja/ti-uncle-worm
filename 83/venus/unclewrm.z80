//************************************************************
//
// Uncle Worm v1.1.2
// =================
// for Venus on the TI-83
//
// Ion version by badja <badja@alphalink.com.au>
// 2 December 1999
//
// ported to Venus by Tijl Coosemans <tijl@ulyssis.org>
// 21 February 2002
//
// You may modify this source code for personal use only.
// You may NOT distribute the modified source or program file.
//
//************************************************************

_ACOS			equ 4122h
_clrScrnBuf		equ 515Bh
_clrScrnFull		equ 475Dh
_CONVOP1		equ 4EFCh
_dispHL			equ 4709h
_DISPOP1A		equ 51D4h
_FPADD			equ 4092h
_FPDIV			equ 40C6h
_FPMULT			equ 40AAh
_getcsc			equ 4014h
_homeUp			equ 4775h
_INVOP1S		equ 40B6h
_ldHLind		equ 4000h
_MOVFROP1		equ 4212h
_OP1SET0		equ 4286h
_OP1TOOP5		equ 41BEh
_OP1TOOP6		equ 41BAh
_OP2TOOP1		equ 41C2h
_OP5TOOP1		equ 419Eh
_OP5TOOP2		equ 4182h
_OP6TOOP2		equ 4192h
_puts			equ 470Dh
_SETXXOP1		equ 4A74h
_SETXXOP2		equ 4A78h
_SETXXXXOP2		equ 4A7Ch
_SIN			equ 40F6h
_vputs			equ 4781h
vRandom			equ $FE6F
vFastCopy		equ $FE75
currow			equ 800Ch
op1			equ 8039h
pencol			equ 8252h
saferam1		equ 8265h
screenBuf		equ 8E29h
dataRam			equ 80C9h
.list

//******** Symbolic constants ********
trgSz	equ	81		// #bytes used to store trigonometric precalcs
OPblk	equ	op1		// beginning of OPx block
initX	equ	47		// initial x-position
initY	equ	63		// initial y-position
initA	equ	24		// initial angle
iniL1	equ	$00		// initial length (most-significant byte)
iniL2	equ	$30		// initial length (least-significant byte)
initD	equ	$20		// game-loop delay (MSB), #cycles = 34 + 29 * (delay - 1)
apl	equ	10		// number of apples per level
sdel	equ	$8000		// duration of short pauses


//******** dataRam IX offsets ********
trig	equ	0		// beginning of trig precalcs array (9 9-byte FP nums)
angle	equ	trig+trgSz	// worm's current angle (ranges from 0 to 31)
long	equ	angle+1	// worm's current length
oldYX	equ	long+2	// previous coordinates for head of worm (Y,X)
newYX	equ	oldYX+2	// current coordinates for head of worm (Y,X)
appYX	equ	newYX+2	// coordinates of current apple (Y,X)
appSz	equ	appYX+2	// size of apple
temp	equ	appSz+1	// two temporary bytes
count	equ	temp+2	// countdown for when worm grows
aLeft	equ	count+1	// number of apples left to get on current level
level	equ	aLeft+1	// current level
lWall	equ	level+1	// X-position of left wall
rWall	equ	lWall+1	// X-position of right wall
score	equ	rWall+1	// current score
speed	equ	score+2	// game speed


//******** Program ********

	org 9329h
	db	"ç9_[V?",0
	jr	nc,start
	db	"Uncle Worm 1.1.2",0
	db	00011111b,00000000b
	db	00100010b,11000000b
	db	01010100b,00100000b
	db	01001100b,01010000b
	db	10110010b,10010000b
	db	10010001b,00100000b
	db	10010000b,11000000b
	db	11110000b,00000000b
	db	10010000b,00000000b
	db	01001011b,10001110b
	db	01010100b,01011110b
	db	00100010b,00111000b
	db	00010101b,01110000b
	db	00101001b,00101100b
	db	00100110b,00000010b
	db	00100000b,00000010b

start
	ld	ix,dataRam		// initialise IX so we can use our offsets
	ld	(ix+speed),1		// initialise speed
restart
	call	_clrScrnBuf		// clear the graph buffer
	ld	de,screenBuf		// display heading picture
	ld	hl,headingPic
	ld	bc,16*12
	ldir

	ld	de,screenBuf+(32*12)
	ld	a,32
drawWormPic
	ld	c,5
	ldir
	ex	de,hl
	ld	c,7
	add	hl,bc
	ex	de,hl
	dec	a
	jr	nz,drawWormPic

	call	vFastCopy		// copy the graph buffer to the screen

	ld	hl,urlTxt		// display URL
	ld	bc,17*256+11
	call	printSmall

	ld	hl,press0Txt		// display press 0 message
	ld	bc,24*256+3
	call	printSmall

	ld	hl,highScoreTxt		// display high score text
	ld	bc,57*256+46
	call	printSmall

showMenu
	ld	a,(ix+speed)		// check if slow should be highlighted
	ld	hl,fastTxt		// display fast menu item
	ld	bc,49*256+58
	ld	a,(ix+speed)
	or	a
	jr	nz,showFast
	set	3,(iy+5)
showFast
	call	printSmall
	res	3,(iy+5)

	ld	bc,41*256+58
	dec	a
	jr	nz,showMedium
	set	3,(iy+5)
showMedium
	call	printSmall
	res	3,(iy+5)

	ld	bc,33*256+58
	dec	a
	jr	nz,showSlow
	set	3,(iy+5)
showSlow
	call	printSmall
	res	3,(iy+5)

	call	getHSloc		// put location of high score for selected speed in HL
	call	_ldHLind		// load the high score into HL
	call	_SETXXXXOP2		// display the high score
	call	_OP2TOOP1
	ld	bc,57*256+83
	ld	(pencol),bc
	ld	a,3
	push	ix
	call	_DISPOP1A
	pop	ix
	ld	hl,spacesTxt		// erase remnants of previous high score
	call	_vputs

menuKey
	call	_getcsc
	halt
	dec	a			// check if down is pressed
	jr	z,down
	cp	4-1			// check if up is pressed
	jr	z,up
	cp	33-1			// check if 0 is pressed
	jp	z,clearHS
	cp	54-1			// check if 2nd is pressed
	jr	z,startGame
	cp	15-1			// check if CLEAR is pressed
	jr	nz,menuKey
quit	res	4,(iy+9)
	call	_clrScrnFull
	jp	_homeUp
down
	ld	a,(ix+speed)
	or	a
	jp	z,showMenu
	dec	a
	ld	(ix+speed),a
	jp	showMenu
up
	ld	a,(ix+speed)
	cp	2
	jp	z,showMenu
	inc	a
	ld	(ix+speed),a
	jp	showMenu
clearHS
	call	getHSloc		// get location of high score
	xor	a			// clear it
	ld	(hl),a
	inc	hl
	ld	(hl),a
	jp	showMenu

startGame
	ld	(ix+level),0		// initialise level
	ld	(ix+lWall),0		// initialise left and right boundaries
	ld	(ix+rWall),95
	ld	hl,0			// initialise score
	ld	(dataRam+score),hl

startLevel
	call	precalcs
	call	_clrScrnBuf		// clear the graph buffer
	ld	(ix+angle),initA	// initialise angle
	ld	(ix+count),0		// initialise countdown
	ld	(ix+aLeft),apl		// initialise number of apples left
	ld	b,iniL1			// initialise length
	ld	c,iniL2
	ld	(ix+long),c
	ld	(ix+long+1),b

	ld	de,saferam1		// start clearing coordinate queue
initQ
	ld	a,1			// load 1 into (DE)
	ld	(de),a
	inc	de			// move to next byte
	dec	bc
	ld	a,b			// loop back if BC is not 0
	or	c
	jr	nz,initQ

	ld	de,screenBuf		// make DE and HL point to start of horizontal
	ld	hl,screenBuf+(63*12)	// lines (on the graph buffer)
	ld	b,0
	ld	c,(ix+level)
	add	hl,bc
	ex	de,hl
	add	hl,bc
	ld	a,12			// make B equal the number of bytes to write to the
	sla	c			// graph buffer
	sub	c
	ld	b,a
	ld	a,%11111111		// draw the horizontal lines
lineH
	ld	(hl),a
	ld	(de),a
	inc	hl
	inc	de
	djnz	lineH

	ld	a,%10000000		// draw the left vertical line
	ld	hl,screenBuf+12
	ld	b,0
	ld	c,(ix+level)
	add	hl,bc
	call	vertLine

	ld	a,%00000001		// draw the right vertical line
	ld	hl,screenBuf+23
	ld	b,0
	ld	c,(ix+level)
	sbc	hl,bc			// carry bit already cleared
	call	vertLine

	ld	a,initX			// initialise x-position into OP5
	call	_SETXXOP1
	call	_OP1TOOP5
	ld	a,initY			// initialise y-position into OP6
	call	_SETXXOP1
	call	_OP1TOOP6

	call	putApple		// generate the first apple

game
	ld	b,$fe
	call	getKeyData
	cp	253			// check if left is pressed
	call	z,left
	cp	251			// check if right is pressed
	call	z,right
	ld	b,$fd
	call	getKeyData
	cp	191			// check if CLEAR is pressed
	jp	z,endGame
	ld	b,$bf
	call	getKeyData
	cp	191			// check if MODE is pressed
	call	z,press2nd

	bit	4,(ix+angle)		// branch if angle < 16
	jr	z,bit3
	bit	3,(ix+angle)		// branch if angle < 24
	jr	z,quad3
quad4					// angle is in 4th quadrant
	ld	a,(ix+angle)		// cos(angle) = sin(angle - 24)
	sub	24
	ld	b,a			// put result (index for dx) into b
	ld	a,32			// sin(angle) = -sin(32 - angle)
	sub	(ix+angle)
	ld	c,a			// put result (index for dy) into c
	ld	d,$01			// 0: dx is positive, 1 dy is negative
	jr	lookup			// B and C now contain indices for the precalc array
quad3
	ld	a,24			// cos(angle) = -sin(24 - angle)
	sub	(ix+angle)
	ld	b,a
	ld	a,(ix+angle)		// sin(angle) = -sin(angle - 16)
	sub	16
	ld	c,a
	ld	d,$11
	jr	lookup
bit3
	ld	a,(ix+angle)		// branch if angle < 8
	bit	3,a
	jr	z,quad1
	cp	8			// branch if angle = 8
	jr	z,quad1
quad2
	ld	a,(ix+angle)		// cos(angle) = -sin(angle - 8)
	sub	8
	ld	b,a
	ld	a,16			// sin(angle) = sin(16 - angle)
	sub	(ix+angle)
	ld	c,a
	ld	d,$10
	jr	lookup
quad1
	ld	c,(ix+angle)		// sin(angle) = sin(angle)
	ld	a,8			// cos(angle) = sin(8 - angle)
	sub	c
	ld	b,a
	ld	d,$00

lookup
	push	bc
	call	doLookup
	bit	4,d			// check if dx was positive or negative
	push	de
	jr	z,plus1
	call	_INVOP1S		// invert OP1 if dx was negative
plus1
	call	_OP5TOOP2		// put x-position in OP2
	call	_FPADD			// add dx to it
	call	_OP1TOOP5		// put result back in OP5
	pop	de
	pop	bc
	ld	b,c
	call	doLookup
	bit	0,d
	jr	z,plus2
	call	_INVOP1S
plus2
	call	_OP6TOOP2
	call	_FPADD
	call	_OP1TOOP6

	ld	a,(ix+count)		// check if worm is still growing
	cp	0
	jr	nz,grow			// if so, jump to the grow code

	ld	de,(saferam1)		// load coordinate of tip of tail into A and E
	ld	a,d
	call	getPixel		// make HL point to byte in graph buffer and A = bit mask
	cpl				// invert all bits in A
	and	(hl)			// AND the byte with the inverted mask
	ld	(hl),a			// to erase the point
	ld	de,saferam1		// shift array of coordinates
	ld	hl,saferam1+2
	ld	c,(ix+long)
	ld	b,(ix+long+1)
	dec	bc
	dec	bc
	ldir
	jr	intPoint

grow
	ld	c,(ix+long)		// make DE point to after coordinate list
	ld	b,(ix+long+1)
	ld	hl,saferam1
	add	hl,bc
	ex	de,hl
	inc	bc			// increase worm length
	inc	bc
	ld	(ix+long),c
	ld	(ix+long+1),b
	dec	(ix+count)		// decrease countdown

intPoint
	push	de
	call	_CONVOP1		// convert OP1 (now holding y-position) to int in DE
	push	de
	call	_OP5TOOP1		// convert OP5 (the x-position) to integer in DE
	call	_CONVOP1
	ld	b,e			// put rounded-off x-position in B ...
	pop	de
	ld	c,e			// ... and rounded-off y-position in C
	pop	de
	ex	de,hl

	ld	e,b			// check for a skipped pixel
	call	fixOrdinate
	ld	b,e
	ld	e,c
	call	fixOrdinate
	ld	c,e

	inc	hl
	inc	hl
	ld	(hl),c			// put y-position at head of coordinate queue
	inc	hl
	ld	(hl),b			// put x-position at head of coordinate queue

	ld	(ix+newYX),c		// store the new coordinate
	ld	(ix+newYX+1),b

	ld	a,b			// check if the worm has crashed into an edge
	cp	(ix+lWall)
	jp	z,crash
	cp	(ix+rWall)
	jp	z,crash
	ld	a,c
	cp	63
	jp	z,crash
	cp	0			// check if worm is in row 0
	jr	nz,checkSame		// if not, worm hasn't crashed into an edge
	ld	a,(ix+aLeft)		// check if all apples have been eaten
	cp	0
	jp	nz,crash		// if not, there's no gap, so worm has crashed
	ld	a,b			// otherwise, get worm's X-position
	cp	$2c			// if it is less than $2c, crash
	jp	c,crash
	cp	$34			// else if it is greater than or equal to $34, crash
	jp	nc,crash
	call	drawNextPixel
	jp	nextLevel		// otherwise go to the next level

checkSame
	ld	a,c			// check if Y-position is same as previous one
	cp	(ix+oldYX)
	jr	nz,checkCrash		// if not, check for a crash
	ld	a,b			// check if X-position is also same as previous one
	cp	(ix+oldYX+1)
	jp	z,drawPix		// if so, head hasn't moved so don't check for a crash

checkCrash
	ld	a,c			// if the previous and current pixels aren't diagonal
	cp	(ix+oldYX)		// to each other, skip the next part, otherwise check
	jr	z,skipDiag		// if the two pixels about them are both lit (to
	ld	a,b			// prevent the worm crossing over itself)
	cp	(ix+oldYX+1)
	jp	z,skipDiag

	ld	d,b			// store first diagonal coordinate in DE
	ld	e,(ix+oldYX)
	ld	hl,saferam1
	ld	c,(ix+long)		// loop (long - 2) times
	ld	b,(ix+long+1)
	dec	bc
	dec	bc
crashLoop1
	ld	a,e			// check if Y-position matches nth Y-pos in list
	cpi
	jr	nz,skipX1		// if not, skip to next coordinate
	ld	a,d			// check if X-position also matches nth X-pos in list
	cp	(hl)
	jr	z,diag2			// if so, first diagonal contains some worm, check 2nd
skipX1
	inc	hl			// move to next coordinate
	dec	bc
	ld	a,b			// loop back if BC is not 0
	or	c
	jr	nz,crashLoop1
	jr	skipDiag

diag2
	ld	d,(ix+oldYX+1)		// store second diagonal coordinate in DE
	ld	e,(ix+newYX)
	ld	hl,saferam1
	ld	c,(ix+long)		// loop (long - 2) times
	ld	b,(ix+long+1)
	dec	bc
	dec	bc
crashLoop2
	ld	a,e			// check if Y-position matches nth Y-pos in list
	cpi
	jr	nz,skipX2		// if not, skip to next coordinate
	ld	a,d			// check if X-position also matches nth X-pos in list
	cp	(hl)
	jp	z,crash			// if so, second diagonal also contains worm (a crash)
skipX2
	inc	hl			// move to next coordinate
	dec	bc
	ld	a,b			// loop back if BC is not 0
	or	c
	jr	nz,crashLoop2

skipDiag
	ld	c,(ix+newYX)		// retrieve current coordinate
	ld	b,(ix+newYX+1)
	ld	(ix+oldYX),c		// store current coordinate in oldYX (prev. coordinate)
	ld	(ix+oldYX+1),b
	ld	d,b			// store current coordinate in DE
	ld	e,c
	ld	hl,saferam1		// make HL point to start of coordinate list
	ld	c,(ix+long)		// loop (long - 2) times
	ld	b,(ix+long+1)
	dec	bc
	dec	bc
crashLoop3
	ld	a,e			// check if Y-position matches nth Y-pos in list
	cpi
	jr	nz,skipX3		// if not, skip to next coordinate
	ld	a,d			// check if X-position also matches nth X-pos in list
	cp	(hl)
	jp	z,crash			// if so, worm has run into himself (a crash)
skipX3
	inc	hl			// move to next coordinate
	dec	bc
	ld	a,b			// loop back if BC is not 0
	or	c
	jr	nz,crashLoop3

	ld	e,(ix+newYX)		// load current coordinate into A and E
	ld	a,(ix+newYX+1)
	call	getPixel		// make HL point to byte in graph buffer and A = bit mask
	and	(hl)			// check if current coordinate is already lit
	jr	z,drawPix		// if not, then worm hasn't hit a apple
	ld	a,(ix+appSz)		// otherwise, erase the apple
	push	af
	call	findSprite
	call	drawApple
	call	drawNextPixel
	pop	af			// get the apple's width
	add	a,4
	ld	l,(ix+score)		// and add it to the score
	ld	h,(ix+score+1)
	ld	b,0
	ld	c,a
	add	hl,bc
	ld	(ix+score),l
	ld	(ix+score+1),h
	sla	a			// quadruple it
	sla	a
	add	a,(ix+count)		// and add it to the countdown
	ld	(ix+count),a
	dec	(ix+aLeft)		// decrease the numbers of apples left
	ld	a,(ix+aLeft)		// check if it was the last apple
	cp	0
	jr	nz,nextApple		// if not, generate a new one
	ld	a,%11110000		// otherwise, make a gap at the top of the screen
	ld	(screenBuf+5),a
	ld	a,%00001111
	ld	(screenBuf+6),a
	jr	drawPix			// don't generate another apple

nextApple
	call	putApple		// generate a new apple

drawPix
	call	drawNextPixel

	ei
	ld	a,(ix+speed)		// game-loop delay
	ld	b,a
	add	a,a
	sub	1
	inc	a
	adc	a,b
	ld	b,a
delayLoop
	halt
	djnz	delayLoop

	jp	game			// repeat game-loop


//******** Routines ********

doLookup
	push	de
	ld	a,b			// multiply x-index by 9 to get byte-offset for array
	rla				// by multiplying by 8 ...
	rla
	rla
	add	a,b			// ... and adding itself
	ld	c,a			// put result in BC
	ld	b,0
	ld	hl,dataRam+trig		// point HL to start of precalc array
	add	hl,bc			// add to HL, now HL points to correct FP num
	ld	de,OPblk		// point DE to OP1
	ld	bc,9			// copy the 9-bytes FP num into OP1
	ldir
	pop	de
	ret

vertLine
	ld	b,62
lineV
	ld	(hl),a
	ld	de,12
	add	hl,de
	djnz	lineV
	ret

fixOrdinate
	dec	hl
	ld	a,e
	sub	(hl)
	ld	d,a
	cp	2
	jr	z,diffTwo
	cp	-2
	jr	z,diffTwo
	ret
diffTwo
	sra	d
	ld	a,e
	sub	d
	ld	e,a
	ret

drawNextPixel
	ld	e,(ix+newYX)		// load current coordinate into A and E
	ld	a,(ix+newYX+1)
	call	getPixel		// make HL point to byte in graph buffer and A = bit mask
	or	(hl)			// combine the byte with the mask
	ld	(hl),a			// to draw the point
	jp	vFastCopy		// copy the graph buffer to the screen

getHSloc
	ld	b,0			// make BC equal speed
	ld	c,(ix+speed)
	sla	c			// double it because each high score takes two bytes
	ld	hl,highs		// make HL point to appropriate high score
	add	hl,bc
	ret

shortDelay
	ld	bc,sdel			// get delay duration
sdPause
	dec	bc
	ld	a,b			// loop back until BC = 0
	or	c
	jr	nz,sdPause
	ret

left
	dec	(ix+angle)		// decrease angle
	ld	a,(ix+angle)
	cp	-1			// check if we need to wrap around to 31
	ret	nz
	ld	(ix+angle),31
	ret

right
	inc	(ix+angle)		// increase angle
	ld	a,(ix+angle)
	cp	32			// check if we need to wrap around to 0
	ret	nz
	ld	(ix+angle),0
	ret

putApple
	ld	a,5			// randomise size of apple
	call	genRandom
	ld	(ix+appSz),a
	ld	c,a

	ld	a,51			// randomise Y coordinate of apple (dependent on size)
	add	a,c
	call	genRandom
	add	a,5
	sub	c
	ld	(ix+appYX),a

	ld	a,(ix+rWall)		// randomise X coordinate of apple (dependent on size
	sub	(ix+lWall)		// and on positions of left and right boundaries)
	sub	12
	add	a,c
	call	genRandom
	add	a,(ix+lWall)
	add	a,5
	sub	c
	ld	(ix+appYX+1),a

	ld	a,c			// make HL point to the sprite
	call	findSprite
	push	hl			// save pointer to the sprite
	ld	a,(ix+appSz)		// make B equal the number of lines in the sprite
	add	a,4
	ld	b,a
	ld	e,(ix+appYX)		// load apple coordinate into A and E
	ld	a,(ix+appYX+1)
fitLoop
	push	bc
	push	af
	push	de
	push	hl
	call	getPixel		// make HL point to byte which contains upper-left corner
	ld	d,(hl)			// of sprite, make A consist of all zero bits except for
	inc	hl			// the bit representing the upper-left corner, load the
	ld	e,(hl)			// byte and the subsequent byte (from gr buff) into D & E
shiftLoop
	rla				// shift A left until the 1 moves into the carry flag ...
	jr	c,shiftDone
	rl	e			// ... each time shifting D and E left
	rl	d
	jr	shiftLoop
shiftDone				// now D contains all bits of interest from graph buffer
	pop	hl			// HL now points to current row of current sprite
	ld	a,d			// check if any bit is lit in both the sprite byte and D
	and	(hl)
	jr	nz,noFit		// if so, the whole apple won't fit in this position
	inc	hl			// otherwise, move on to next row of sprite
	pop	de
	pop	af
	pop	bc
	inc	e			// move on to next row of the screen
	djnz	fitLoop
	pop	hl			// HL now points to the start of the sprite again
	jr	drawApple
noFit
	pop	de			// try again with new coordinates and a new size apple
	pop	af
	pop	bc
	pop	hl
	jr	putApple

drawApple
	ld	a,(ix+appSz)		// make B equal the number of lines in the sprite
	add	a,4
	ld	b,a
	ld	e,(ix+appYX)		// load current coordinate into A and E
	ld	a,(ix+appYX+1)
	push	ix			// load IX with sprite address
	ld	(dataRam+temp),hl
	ld	ix,(dataRam+temp)
	ld	l,e
	call	drawSprite		// draw the apple
	pop	ix
	ret

findSprite				// where A = apple size
	ld	hl,apples		// make HL point to start of apple sprites
	cp	0			// if apple is the smallest size, leave HL and return
	ret	z
	ld	b,a			// otherwise add 4, then 5, etc until B is 0
	ld	de,4
findLoop
	add	hl,de
	inc	de
	djnz	findLoop
	ret

crash
	call	invert			// invert screen
	call	shortDelay		// pause
	call	invert			// invert screen again
endGame
	set	3,(iy+5)
	ld	bc,$0003		// display your score text
	ld	hl,yourScoreTxt
	call	printLarge
	ld	bc,$0004		// display high score text
	ld	hl,highScoreTxt
	call	printLarge

	call	getHSloc		// make HL point to high score for current speed
	push	hl			// save high score location
	ld	e,(hl)			// load DE with high score
	inc	hl
	ld	d,(hl)
	ld	l,(ix+score)		// load HL with current score
	ld	h,(ix+score+1)
	ld	bc,$0b03		// display current score
	ld	(currow),bc
	push	de
	push	hl
	call	_dispHL
	pop	hl
	pop	de
	call	highscr			// work out new high score
	ld	bc,$0b04		// display new high score
	ld	(currow),bc
	push	hl
	call	_dispHL
	pop	hl
	pop	de			// restore high score location
	ld	a,l			// write high score back to original location
	ld	(de),a
	inc	de
	ld	a,h
	ld	(de),a
	res	3,(iy+5)
	call	press2nd
	jp	restart

invert
	ld	bc,$300			// $300 bytes in the graph buffer
	ld	hl,screenBuf
invertLoop
	ld	a,(hl)			// invert the current byte
	cpl
	ld	(hl),a
	inc	hl			// move onto the next byte
	dec	bc
	ld	a,b			// loop back until BC = 0
	or	c
	jr	nz,invertLoop
	jp	vFastCopy		// copy the graph buffer to the screen

nextLevel
	set	3,(iy+5)
	ld	bc,$0003		// display bonus text
	ld	hl,bonusTxt
	call	printLarge
	ld	bc,$0004		// display your score text
	ld	hl,yourScoreTxt
	call	printLarge

	inc	(ix+level)		// increment level number
	ld	e,(ix+level)		// multiply new level number by 16
	sla	e
	sla	e
	sla	e
	sla	e
	ld	d,0
	push	de
	ex	de,hl
	ld	bc,$0b03		// display bonus
	ld	(currow),bc
	call	_dispHL
	pop	de
	ld	l,(ix+score)		// and add it to the score
	ld	h,(ix+score+1)
	add	hl,de
	ld	(ix+score),l
	ld	(ix+score+1),h
	ld	bc,$0b04		// display current score
	ld	(currow),bc
	call	_dispHL
	res	3,(iy+5)

	ld	a,(ix+lWall)		// add 8 to left boundary
	add	a,8
	ld	(ix+lWall),a
	ld	a,(ix+rWall)		// subtract 8 from right boundary
	sub	8
	ld	(ix+rWall),a
	call	press2nd
	ld	a,(ix+level)
	cp	6
	jp	z,endGame
	jp	startLevel		// start the next level

press2nd
	call	_getcsc
	halt
	cp	54			// check if 2nd is pressed
	jr	nz,press2nd
	ret


//---------= High Score =---------
// Input de=previous high score
//	hl=current score
// Output hl=high score
//	z=1 (a=0) if new high score, z=0 (a=1) if not
// Registers destroyed af, de, hl
highscr
	push	hl
	xor	a
	sbc	hl,de
	pop	hl
	jr	z,nnhs
	jr	nc,nhs
nnhs	ex	de,hl
	inc	a
	ret
nhs	or	a
	ret


precalcs
	call	_OP1SET0		// get PI/2 in OP1
	call	_ACOS
	ld	a,8			// divide it by 8 to get angle 1/32nd of a circle
	call	_SETXXOP2
	call	_FPDIV
	call	_OP1TOOP6		// store this smallest angle increment in OP6

	xor	a			// first precalc will be sin 0, then sin 2*PI/32
	ld	de,dataRam+trig		// point DE to the trig precalc array
precalc
	push	af
	push	de
	call	_SETXXOP1		// put precalc number in OP1
	call	_OP6TOOP2		// put angle increment in OP2
	call	_FPMULT			// multiply them
	call	_SIN			// get its sine
	pop	de
	call	_MOVFROP1		// put the result in the precalc array
	pop	af
	inc	a			// prepare for next precalc
	cp	9			// only 9 precalcs needed
	jr	nz,precalc
	ret

printSmall
	ld	(pencol),bc
	jp	_vputs

printLarge
	ld	(currow),bc
	jp	_puts

getKeyData
	ld	a,$ff			// reset keyport
	out	(1),a
	ld	a,b
	out	(1),a
	in	a,(1)
	ret

genRandom
	push	bc
	push	af
	call	vRandom
	ld	d,0
	ld	e,h
	ld	h,d
	ld	l,d
	pop	af
	ld	b,a
genRandomLoop
	add	hl,de
	djnz	genRandomLoop
	ld	a,h
	pop	bc
	ret

drawSprite
	ld	h,0
	ld	d,h
	ld	e,l
	add	hl,de
	add	hl,de
	add	hl,hl
	add	hl,hl
	ld	e,a
	srl	e
	srl	e
	srl	e
	add	hl,de
	ld	de,8E29h
	add	hl,de
	and	7
	ld	c,a
drawSpriteLoop1
	ld	d,(ix)
	ld	e,0
	inc	ix
	ld	a,c
	or	a
	jr	z,drawSprite1
drawSpriteLoop2
	srl	d
	rr	e
	dec	a
	jr	nz,drawSpriteLoop2
drawSprite1
	ld	a,d
	xor	(hl)
	ld	(hl),a
	inc	hl
	ld	a,e
	xor	(hl)
	ld	(hl),a
	ld	de,11
	add	hl,de
	djnz	drawSpriteLoop1
	ret

getPixel
	ld	d,0
	ld	h,d
	ld	l,e
	add	hl,de
	add	hl,de
	add	hl,hl
	add	hl,hl
	ld	e,a
	srl	e
	srl	e
	srl	e
	add	hl,de
	ld	de,screenBuf
	add	hl,de
	and	7
	inc	a
	ld	b,a
	ld	a,1
getPixelLoop
	rrca
	djnz	getPixelLoop
	ret


//******** Data ********

apples
	db	%01100000
	db	%11110000
	db	%11110000
	db	%01100000

	db	%01110000
	db	%11111000
	db	%11111000
	db	%11111000
	db	%01110000

	db	%01111000
	db	%11111100
	db	%11111100
	db	%11111100
	db	%11111100
	db	%01111000

	db	%00111000
	db	%01111100
	db	%11111110
	db	%11111110
	db	%11111110
	db	%01111100
	db	%00111000

	db	%00111100
	db	%01111110
	db	%11111111
	db	%11111111
	db	%11111111
	db	%11111111
	db	%01111110
	db	%00111100

headingPic
	db	%00000000,%00111000,%00000000,%00000011,%00000000,%00000000
	db	%01000011,%00000011,%10000000,%00000000,%00000000,%00000000
	db	%00001000,%00111000,%00000000,%00000011,%00000000,%00000000
	db	%11100011,%10000011,%10000000,%00000000,%00000000,%00000000
	db	%00001100,%00011000,%00000000,%00000011,%00000000,%00000000
	db	%11100011,%10000011,%00000000,%00000000,%00000000,%00000000
	db	%00001100,%00011000,%00000000,%00000011,%00000000,%00000000
	db	%01100011,%10000011,%00000000,%00000000,%00000000,%00000000
	db	%00001100,%00011000,%00000000,%00000011,%00000000,%00000000
	db	%01100110,%11000111,%00000000,%00000000,%00000000,%00000000
	db	%00001100,%00011011,%00011000,%01110011,%00001110,%00000000
	db	%01110110,%11000111,%00011100,%01100111,%01110111,%00010000
	db	%00001100,%00011011,%00111100,%11110011,%00011111,%00000000
	db	%01110110,%01000110,%00111110,%01101110,%01110111,%00111000
	db	%00001100,%00011011,%01111100,%11011011,%00011011,%00000000
	db	%00110110,%01101110,%01110011,%01111000,%01111111,%00111000
	db	%00001100,%00011011,%11111101,%11011011,%00110011,%00000000
	db	%00110110,%01101110,%01100011,%01110000,%01111111,%01111000
	db	%00001100,%00011011,%11101101,%10011011,%00110111,%00000000
	db	%00111100,%01111110,%01100011,%01110000,%01111011,%01111000
	db	%00001110,%00111011,%11001101,%10011011,%00110110,%00000000
	db	%00111100,%00111100,%01100011,%01100000,%01111011,%11011000
	db	%00000110,%00110011,%10001101,%10000011,%00111100,%00000000
	db	%00011100,%00111100,%01100011,%01100000,%01110011,%11011000
	db	%00000110,%00110011,%10001101,%10011011,%00110001,%00000000
	db	%00011100,%00111100,%01100011,%01100000,%01110011,%10011000
	db	%00000111,%01110011,%00001101,%10011011,%00110011,%10000000
	db	%00011110,%00111100,%01100111,%01100000,%00110011,%10011000
	db	%00000011,%11100011,%10000000,%11110011,%00011111,%00000000
	db	%00011110,%00011000,%00111110,%01100000,%00000011,%00011000
	db	%00000001,%11000011,%00000000,%01100011,%00001110,%00000000
	db	%00001100,%00000000,%00011100,%01100000,%00000001,%00011000

wormPic
	db	%00000000,%00000011,%11000000,%00000000,%00000000
	db	%00000000,%00001110,%00110000,%00000000,%00000000
	db	%00000000,%00110010,%00101100,%00000000,%00000000
	db	%00000000,%01100010,%00100010,%00000000,%00000000
	db	%00000000,%10100001,%00100001,%00000000,%00000000
	db	%00000000,%10010001,%01000010,%10000000,%00000000
	db	%00000001,%00001011,%11001000,%10000000,%00000000
	db	%00000001,%10000100,%00100000,%10000000,%00000000
	db	%00000010,%01111000,%00010001,%00000000,%00000000
	db	%00000010,%00010000,%00001110,%00000000,%00000000
	db	%00000011,%00110000,%00000000,%00000000,%00000000
	db	%00000010,%11010000,%00000000,%00000000,%00111110
	db	%00000010,%00010001,%11111111,%00000000,%11111111
	db	%00000011,%00111110,%00000000,%11000011,%11111111
	db	%00000010,%11000100,%00000000,%00101111,%11111111
	db	%00000001,%00001010,%00000000,%00011111,%11000011
	db	%00000001,%11110001,%00000000,%00111111,%00000000
	db	%00000010,%01000010,%10000100,%01111100,%00000000
	db	%00000100,%00111100,%10000100,%11110011,%10000000
	db	%00001000,%00010000,%11100100,%11100000,%01000000
	db	%00010000,%00010111,%01100010,%00000000,%00100000
	db	%00010000,%00111000,%01100011,%10001000,%00010000
	db	%00100000,%00111110,%11100000,%11110000,%00010000
	db	%01000000,%00011111,%11000000,%00000000,%00001000
	db	%01000000,%00001111,%10000000,%00000000,%00001000
	db	%01000000,%00000000,%00000000,%00000000,%00000100
	db	%01000000,%00000000,%00000000,%00000000,%00000100
	db	%10000000,%00000000,%00000000,%00000000,%00000100
	db	%10000000,%00000000,%00000000,%00000000,%00000100
	db	%10000000,%00000000,%00000000,%00000000,%00000100
	db	%10000000,%00000000,%00000000,%00000000,%00000100
	db	%10000000,%00000000,%00000000,%00000000,%00001000

urlTxt
	db	"http//badja.calc.org",0

press0Txt
	db	"Press 0 to clear a high score",0

fastTxt
	db	"Fast",0

mediumTxt
	db	"Medium",0

slowTxt
	db	"Slow",0

spacesTxt
	db	"     ",0

bonusTxt
	db	"     Bonus",0

yourScoreTxt
	db	"Your score",0

highScoreTxt
	db	"High score",0

highs
	dw	0,0,0
